a <- factanal(factors = 5, covmat = cor_matrix, method = "mle")
a$criteria
summary(a)
a
a$stats["df"]
R.version.string
R.version.string
knitr::opts_chunk$set(echo = TRUE)
library("lattice")
library("ellipse")
library("HSAUR3")
library(ggplot2)
cor_matrix <- matrix(c(1.00, -0.04, 0.61, 0.45, 0.03, -0.29, -0.30, 0.45, 0.30,
-0.04, 1.00, -0.07, -0.12, 0.49, 0.43, 0.30, -0.31, -0.17,
0.61, -0.07, 1.00, 0.59, 0.03, -0.13, -0.24, 0.59, 0.32,
0.45, -0.12, 0.59, 1.00, -0.08, -0.21, -0.19, 0.63, 0.37,
0.03, 0.49, 0.03, -0.08, 1.00, 0.47, 0.41, -0.14, -0.24,
-0.29, 0.43, -0.13, -0.21, 0.47, 1.00, 0.63, -0.13, -0.15,
-0.30, 0.30, -0.24, -0.19, 0.41, 0.63, 1.00, -0.26, -0.29,
0.45, -0.31, 0.59, 0.63, -0.14, -0.13, -0.26, 1.00, 0.40,
0.30, -0.17, 0.32, 0.37, -0.24, -0.15, -0.29, 0.40, 1.00),
nrow = 9, ncol = 9, byrow = TRUE)
pca <- prcomp(cor_matrix, scale. = TRUE)
print(pca)
eigenvalues_df <- data.frame(Component = 1:length(pca$sdev), Eigenvalue = pca$sdev^2)
# Plot the scree plot
ggplot(eigenvalues_df, aes(x = Component, y = Eigenvalue)) +
geom_point() +
geom_line() +
ggtitle("Scree Plot") +
xlab("Component") +
ylab("Eigenvalue") +
theme_minimal() +
scale_x_continuous(limits = c(1, 9),
breaks = seq(1, 9, 1),
labels = seq(1, 9, 1))
ml_factor_analysis <- function(cor_matrix, n_factors) {
ml_fa <- factanal(factors = n_factors, covmat = cor_matrix, method = "mle")
return(c(chi_square = ml_fa$stats[1], p_value = ml_fa$stats[2]))
}
n_variables <- nrow(cor_matrix)
factors_stats <- sapply(1:5, function(n_factors) ml_factor_analysis(cor_matrix, n_factors))
factor_results <- data.frame(Number_of_Factors = 1:5, Chi_Square_Statistic = factors_stats[1,], P_Value = factors_stats[2,])
factanal(factors = n_factors, covmat = cor_matrix, method = "mle")
factanal(factors = 5, covmat = cor_matrix, method = "mle")
a <- factanal(factors = 5, covmat = cor_matrix, method = "mle")
a <- try(factanal(factors = 5, covmat = cor_matrix, method = "mle"))
if(class(a) == "try-error") {
message("Error: ", conditionMessage(a))
} else {
a$stats
}
a <- factanal(factors = 5, covmat = cor_matrix, method = "mle", verbose = TRUE)
a$stats
sd_matrix <- diag(sqrt(var_vector))
var_vector <- apply(cor_matrix, 2, var)
sd_matrix <- diag(sqrt(var_vector))
cov_matrix <- corr_matrix %*% sd_matrix %*% sd_matrix
cor_matrix <- matrix(c(1.00, -0.04, 0.61, 0.45, 0.03, -0.29, -0.30, 0.45, 0.30,
-0.04, 1.00, -0.07, -0.12, 0.49, 0.43, 0.30, -0.31, -0.17,
0.61, -0.07, 1.00, 0.59, 0.03, -0.13, -0.24, 0.59, 0.32,
0.45, -0.12, 0.59, 1.00, -0.08, -0.21, -0.19, 0.63, 0.37,
0.03, 0.49, 0.03, -0.08, 1.00, 0.47, 0.41, -0.14, -0.24,
-0.29, 0.43, -0.13, -0.21, 0.47, 1.00, 0.63, -0.13, -0.15,
-0.30, 0.30, -0.24, -0.19, 0.41, 0.63, 1.00, -0.26, -0.29,
0.45, -0.31, 0.59, 0.63, -0.14, -0.13, -0.26, 1.00, 0.40,
0.30, -0.17, 0.32, 0.37, -0.24, -0.15, -0.29, 0.40, 1.00),
nrow = 9, ncol = 9, byrow = TRUE)
cov_matrix <- cor_matrix %*% sd_matrix %*% sd_matrix
cov_matrix
ml_factor_analysis <- function(cor_matrix, n_factors) {
ml_fa <- factanal(factors = n_factors, covmat = cov_matrix, method = "mle")
return(c(chi_square = ml_fa$stats[1], p_value = ml_fa$stats[2]))
}
a <- factanal(factors = 5, covmat = cov_matrix, method = "mle", verbose = TRUE)
a$stats
a <-factanal(factors = n_factors, covmat = cov_matrix, method = "mle")
a <-factanal(factors = 5, covmat = cov_matrix, method = "mle")
a
factanal(factors = 1, covmat = cov_matrix, method = "mle")
factanal(factors = 2, covmat = cov_matrix, method = "mle")
factanal(factors = 3, covmat = cov_matrix, method = "mle")
factanal(factors = 4, covmat = cov_matrix, method = "mle")
factanal(factors = 5, covmat = cov_matrix, method = "mle")
factanal(factors = 6, covmat = cov_matrix, method = "mle")
factanal(factors = 1, covmat = cor_matrix, method = "mle")
factanal(factors = 2, covmat = cor_matrix, method = "mle")
factanal(factors = 3, covmat = cor_matrix, method = "mle")
factanal(factors = 4, covmat = cor_matrix, method = "mle")
factanal(factors = 5, covmat = cor_matrix, method = "mle")
factanal(factors = 1, covmat = cor_matrix, method = "mle")
factanal(factors = 2, covmat = cor_matrix, method = "mle")
factanal(factors = 1, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 1, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 2, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 3, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 4, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 5, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 1, covmat = cov_matrix, method = "mle", scores = "regression")
factanal(factors = 2, covmat = cor_matrix, method = "mle", scores = "regression")
d <- c(0.447,
0.422, 0.619,
0.435, 0.604, 0.583,
0.114, 0.068, 0.053, 0.115,
0.203, 0.146, 0.139, 0.258, 0.349,
0.091, 0.103, 0.110, 0.122, 0.209, 0.221,
0.082, 0.063, 0.066, 0.097, 0.321, 0.355, 0.201,
0.513, 0.445, 0.365, 0.482, 0.186, 0.315, 0.150, 0.154,
0.304, 0.318, 0.240, 0.368, 0.303, 0.377, 0.163, 0.219, 0.534,
0.245, 0.203, 0.183, 0.255, 0.272, 0.323, 0.310, 0.288, 0.301, 0.302,
0.101, 0.088, 0.074, 0.139, 0.279, 0.367, 0.232, 0.320, 0.204, 0.368, 0.340,
0.245, 0.199, 0.184, 0.293, 0.278, 0.545, 0.232, 0.314, 0.394, 0.467, 0.392, 0.511)
druguse <- diag(13) / 2
druguse[upper.tri(druguse)] <- d
druguse <- druguse + t(druguse)
rownames(druguse) <- colnames(druguse) <- c("cigarettes", "beer", "wine", "liquor", "cocaine",
"tranquillizers", "drug store medication", "heroin",
"marijuana", "hashish", "inhalants", "hallucinogenics", "amphetamine")
"life" <- structure(.Data = list(c(63., 34., 38., 59., 56., 62., 50., 65., 56., 69., 65., 64., 56., 60., 61., 49., 59., 63.,59., 65., 65., 64., 64., 67., 61., 68., 67., 65., 59., 58., 57.)
, c(51., 29., 30., 42., 38., 44., 39., 44., 46., 47., 48., 50., 44., 44., 45., 40., 42., 44., 44., 48., 48., 63.,
43., 45., 40., 46., 45., 46., 43., 44., 46.)
, c(30., 13., 17., 20., 18., 24., 20., 22., 24., 24., 26., 28., 25., 22., 22., 22., 22., 23., 24., 28., 26., 21.,
21., 23., 21., 23., 23., 24., 23., 24., 28.)
, c(13., 5., 7., 6., 7., 7., 7., 7., 11., 8., 9., 11., 10., 6., 8., 9., 6., 8., 8., 14., 9., 7., 6., 8., 10., 8.,
8., 9., 10., 9., 9.)
, c(67., 38., 38., 64., 62., 69., 55., 72., 63., 75., 68., 66., 61., 65., 65., 51., 61., 67., 63., 68., 67., 68.,
68., 74., 67., 75., 74., 71., 66., 62., 60.)
, c(54., 32., 34., 46., 46., 50., 43., 50., 54., 53., 50., 51., 48., 45., 49., 41., 43., 48., 46., 51., 49., 47.,
47., 51., 46., 52., 51., 51., 49., 47., 49.)
, c(34., 17., 20., 25., 25., 28., 23., 27., 33., 29., 27., 29., 27., 25., 27., 23., 22., 26., 25., 29., 27., 25.,
24., 28., 25., 29., 28., 28., 27., 25., 28.)
, c(15., 6., 7., 8., 10., 14., 8., 9., 19., 10., 10., 11., 12., 9., 10., 8., 7., 9., 8., 13., 10., 9., 8., 10., 11.,
10., 10., 10., 12., 10., 11.)
)
, class = "data.frame"
, names = c("m0", "m25", "m50", "m75", "w0", "w25", "w50", "w75")
, row.names = c("Algeria", "Cameroon", "Madagascar", "Mauritius", "Reunion", "Seychelles", "South Africa (C)", "South Africa (W)",
"Tunisia", "Canada", "Costa Rica", "Dominican Rep.", "El Salvador", "Greenland", "Grenada", "Guatemala",
"Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", "Trinidad (62)", "Trinidad (67)",
"United States (66)", "United States (NW66)", "United States (W66)", "United States (67)", "Argentina",
"Chile", "Colombia", "Ecuador")
)
toLatex(HSAURtable(life), pcol = 1, rownames = TRUE,
caption = "Life expectancies for different countries by age and gender.",
label = "ch:EFA:life:tab")
m <- life[,1:4]
f <- life[,5:8]
factanal(m, factors = 1, method ="mle", scores = "regression")
factanal(factors = 1, covmat = cor_matrix, method = "mle", scores = "regression")
factanal(factors = 1, covmat = cor_matrix, method = "mle")
factanal(factors = 1, covmat = cor_matrix, method = "mle")
factanal(factors = 2, covmat = cor_matrix, method = "mle")
factanal(factors = 3, covmat = cor_matrix, method = "mle")
factanal(factors = 4, covmat = cor_matrix, method = "mle")
factanal(factors = 5, covmat = cor_matrix, method = "mle")
fa_solution <- factanal(factors = 5, covmat = cor_matrix, rotation = "varimax")
varimax_solution <- varimax(fa_solution$loadings)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
library(psych)
install.packages("psych")
library(psych)
fa_solution <- factanal(factors = 5, covmat = cor_matrix, rotation = "varimax")
varimax_solution <- varimax(fa_solution$loadings)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
library(psych)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
install.packages("psych")
library(psych)
library(psych)
library(psych)
fa_solution <- factanal(factors = 5, covmat = cor_matrix, rotation = "varimax")
varimax_solution <- varimax(fa_solution$loadings)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
install.packages("psych")
library(psych)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
oblimin?
```
?oblimin
??oblimin
install.packages("GPArotation ")
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
library(GPArotation)
install.packages("GPArotation")
library(GPArotation)
oblimin_solution <- oblimin(fa_solution$loadings, fm = "ml")
oblimin_solution <- oblimin(fa_solution$loadings)
oblimin_solution
(varimax_solution <- varimax(fa_solution$loadings))
(oblimin_solution <- oblimin(fa_solution$loadings))
(varimax_solution <- varimax(fa_solution$loadings))
(oblimin_solution <- oblimin(fa_solution$loadings))
R <- matrix(c(1.00, 0.44, 0.41, 0.29, 0.33, 0.25,
0.44, 1.00, 0.35, 0.35, 0.32, 0.33,
0.41, 0.35, 1.00, 0.16, 0.19, 0.18,
0.29, 0.35, 0.16, 1.00, 0.59, 0.47,
0.33, 0.32, 0.19, 0.59, 1.00, 0.46,
0.25, 0.33, 0.18, 0.47, 0.46, 1.00),)
rownames(R) <- colnames(R) <- c("French", "English", "History", "Arithmetic", "Algebra", "Geometry")
fa <- factanal(R, factors = 2, covmat = R, method = "mle", rotation = "none")
R
R <- matrix(c(1.00, 0.44, 0.41, 0.29, 0.33, 0.25,
0.44, 1.00, 0.35, 0.35, 0.32, 0.33,
0.41, 0.35, 1.00, 0.16, 0.19, 0.18,
0.29, 0.35, 0.16, 1.00, 0.59, 0.47,
0.33, 0.32, 0.19, 0.59, 1.00, 0.46,
0.25, 0.33, 0.18, 0.47, 0.46, 1.00),   nrow = 6, ncol = 6, byrow = TRUE)
rownames(R) <- colnames(R) <- c("French", "English", "History", "Arithmetic", "Algebra", "Geometry")
fa <- factanal(R, factors = 2, covmat = R, method = "mle", rotation = "none")
tinytex::reinstall_tinytex(repository = "illinois").
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::install_tinytex()
tinytex::install_tinytex()
download.file(url, destfile = filename, method = "curl")
tinytex::install_tinytex(method = "curl")
tinytex::install_tinytex(extraopts = "--curl")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages(c("blob", "broom", "cli", "commonmark", "datawizard", "dbplyr", "deSolve", "digest", "dplyr", "dtplyr", "emmeans", "fastmap", "FNN", "future", "ggsci", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "insight", "ipred", "lme4", "modelr", "multcomp", "openssl", "parallelly", "pillar", "ps", "rlang", "sjPlot", "testthat", "tibble", "vctrs", "vtable", "xfun"))
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
install.packages("rlang")
install.packages("rlang")
library("ggplot2")
tinytex::reinstall_tinytex()
options(tinytex.verbose = TRUE)
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
\usepackage[utf8]{inputenc}
# Your group work will involve the acupuncture data set. I've
# uploaded a csv file in the Misc folder in the Files section.
acup <- read.csv("acupuncture.csv")
# Your group work will involve the acupuncture data set. I've
# uploaded a csv file in the Misc folder in the Files section.
acup <- read.csv("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6026acupuncture.csv")
# Your group work will involve the acupuncture data set. I've
# uploaded a csv file in the Misc folder in the Files section.
acup <- read.csv("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6026/acupuncture.csv")
# Your task in group work today is to be done in three parts.
acup
t.test(pk5 - pk1  ~ group, data = acup, var.equal = FALSE)
# Your group work will involve the acupuncture data set. I've
# uploaded a csv file in the Misc folder in the Files section.
data <- read.csv("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6026/acupuncture.csv")
t.test(pk5 - pk1  ~ group, data = data, var.equal = FALSE)
data$diff_pk <- data$pk1 - data$pk5
pk1_diff <- data %>% filter(group == 1) %>% pull(diff_pk)
pk5_diff <- data %>% filter(group == 0) %>% pull(diff_pk)
install.packages("dplyr")
library(dplyr)
%>%
library(dplyr)
diff_pk <- data$pk1 - data$pk5
diff_pk
pk1_diff <- data[data$group == 1, ]$diff_pk
pk5_diff <- data[data$group == 0, ]$diff_pk
data$diff_pk <- data$pk1 - data$pk5
pk1_diff <- data[data$group == 1, ]$diff_pk
pk5_diff <- data[data$group == 0, ]$diff_pk
# Set the number of permutations
n <- 10000
# Initialize a vector to store the permuted differences
permuted_diffs <- numeric(n)
# Perform the permutations
set.seed(42)  # For reproducibility
for (i in 1:10000) {
shuffled_data <- data[sample(nrow(data)), ]
acupuncture_diff_perm <- shuffled_data[shuffled_data$group == 1, ]$diff_pk
control_diff_perm <- shuffled_data[shuffled_data$group == 0, ]$diff_pk
permuted_diffs[i] <- mean(acupuncture_diff_perm) - mean(control_diff_perm)
}
if (observed_diff > 0) {
p_value <- sum(permuted_diffs >= observed_diff) / n_permutations
} else {
p_value <- sum(permuted_diffs <= observed_diff) / n_permutations
}
observed_diff <- mean(pk1_diff) - mean(pk5_diff)
# Initialize a vector to store the permuted differences
permuted_diffs <- numeric(n)
# Perform the permutations
set.seed(42)  # For reproducibility
for (i in 1:10000) {
shuffled_data <- data[sample(nrow(data)), ]
acupuncture_diff_perm <- shuffled_data[shuffled_data$group == 1, ]$diff_pk
control_diff_perm <- shuffled_data[shuffled_data$group == 0, ]$diff_pk
permuted_diffs[i] <- mean(acupuncture_diff_perm) - mean(control_diff_perm)
}
if (observed_diff > 0) {
p_value <- sum(permuted_diffs >= observed_diff) / n_permutations
} else {
p_value <- sum(permuted_diffs <= observed_diff) / n_permutations
}
if (observed_diff > 0) {
p_value <- sum(permuted_diffs >= observed_diff) / 10000
} else {
p_value <- sum(permuted_diffs <= observed_diff) / 10000
}
print(paste("Permutation test p-value:", p_value))
observed_diff
observed_diff <- mean(pk1_diff) - mean(pk5_diff)
observed_diff
permuted_diffs
shuffled_data <- data[sample(nrow(data)), ]
shuffled_data
# Initialize a vector to store the permuted differences
permuted_diffs <- numeric(n)
permuted_diffs
for (i in 1:10000) {
shuffled_data <- data[sample(nrow(data)), ]
permuted_diffs[i] <- mean(shuffled_data[shuffled_data$group == 1, ]$diff_pk) - mean(shuffled_data[shuffled_data$group == 0, ]$diff_pk)
}
permuted_diffs
data[sample(nrow(data)), ]
data[sample(nrow(data)), ]
mean(shuffled_data[shuffled_data$group == 1, ]$diff_pk)
mean(shuffled_data[shuffled_data$group == 0, ]$diff_pk)
shuffled_data <- data[sample(nrow(data)), ]
mean(shuffled_data[shuffled_data$group == 1, ]$diff_pk)
mean(shuffled_data[shuffled_data$group == 0, ]$diff_pk)
sample(5)
# Initialize a vector to store the permuted differences
permuted_diffs <- numeric(n)
for (i in 1:10000) {
shuffled_data <- data[sample(nrow(data)), ]
permuted_diffs[i] <- mean(shuffled_data[shuffled_data$group == 1, ]$diff_pk - shuffled_data[shuffled_data$group == 0, ]$diff_pk)
}
permuted_diffs
if (observed_diff > 0) {
p_value <- sum(permuted_diffs >= observed_diff) / 10000
} else {
p_value <- sum(permuted_diffs <= observed_diff) / 10000
}
print(paste("Permutation test p-value:", p_value))
p_value
knitr::opts_chunk$set(echo = TRUE)
data$diff_pk <- data$pk1 - data$pk5
pk5_diff <- data[data$group == 0, ]$diff_pk
observed_diff <- mean(pk1_diff) - mean(pk5_diff)
n <- 10000
permuted_diffs <- numeric(n)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
p_value <- sum(abs(permuted_diffs) >= abs(observed_diff)) / n_permutations
p_value <- sum(abs(permuted_diffs) >= abs(observed_diff)) / n
p_value
set.seed(42)
for (i in 1:n) {
sample <- data[sample(nrow(data)), ]
permuted_diffs[i] <- mean(sample[sample$group == 1, ]$diff_pk - sample[sample$group == 0, ]$diff_pk)
}
data <- read.csv("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6026/acupuncture.csv")
data <- read.csv("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6026/acupuncture.csv")
data$diff_pk <- data$pk1 - data$pk5
pk1_diff <- data[data$group == 1, ]$diff_pk
pk5_diff <- data[data$group == 0, ]$diff_pk
observed_diff <- mean(pk1_diff) - mean(pk5_diff)
n <- 10000
permuted_diffs <- numeric(n)
set.seed(42)
for (i in 1:n) {
sample <- data[sample(nrow(data)), ]
permuted_diffs[i] <- mean(sample[sample$group == 1, ]$diff_pk - sample[sample$group == 0, ]$diff_pk)
}
p_value <- sum(abs(permuted_diffs) >= abs(observed_diff)) / n
p_value
set.seed(42)
for (i in 1:n) {
sample_dat <- data[sample(nrow(data)), ]
permuted_diffs[i] <- mean(sample_dat[sample_dat$group == 1, ]$diff_pk - sample_dat[sample_dat$group == 0, ]$diff_pk)
}
sample(data$diff_pk)
for (i in 1:n) {
sample_dat <- sample(data$diff_pk)
permuted_diffs[i] <- mean(sample_dat[sample_dat$group == 1, ]$diff_pk) - mean(sample_dat[sample_dat$group == 0, ]$diff_pk)
}
for (i in 1:n) {
sample_dat <- sample(data$diff_pk)
permuted_diffs[i] <- mean(sample_dat[data$group == 1]) - mean(sample_dat[data$group == 0])
}
p_value <- sum(abs(permuted_diffs) >= abs(observed_diff)) / n
p_value
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd(C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6122)
setwd("C:/Users/tonyg/Desktop/Academic/Grad/HUDM 6122")
crime <- read.table("crime.txt", header = TRUE)
crime
crime <- read.table("crime.txt", header = TRUE)
standardized_crime <- scale(crime, center = TRUE, scale = apply(crime, 2, sd))
kmeans_result <- kmeans(standardized_crime, centers = num_clusters)
kmeans_result <- kmeans(standardized_crime, centers = 3)
range_standardized_crime <- scale(crime, center = TRUE, scale = apply(crime, 2, function(x) max(x) - min(x)))
kmeans_result_range <- kmeans(range_standardized_crime, centers = num_clusters)
kmeans_result_range <- kmeans(range_standardized_crime, centers = 3)
print(kmeans_result)
print(kmeans_result)
print(kmeans_result_range)
kmeans(crime_sd, centers = 2)$centers * sd_crime
sd_crime <- sapply(crime, sd)
crime_sd <- sweep(crime, 2, sd_crime, FUN = "/")
kmeans(crime_sd, centers = 2)$centers * sd_crime
kmeans(crime_sd, centers = 2)
kmeans(crime_sd, centers = 2)$centers * sd_crime
kmeans(crime_sd, centers = 2)$centers
kmeans(crime_sd, centers = 2)$centers * sd_crime
kmeans(crime_sd, centers = 2)$centers * sd_crime
data("pottery", package = "HSAUR2")
library(car)
data("pottery", package = "HSAUR2")
sd_pottery <- scale(pottery)
sd_pottery <- scale(pottery)
pottery
pca_result <- prcomp(pottery)
pca_result <- prcomp(pottery, scale = TRUE)
pottery
numeric_columns <- sapply(pottery, is.numeric)
numeric_columns
pottery$kiln <- as.numeric(as.character(pottery$kiln))
pca_result <- prcomp(pottery, scale = TRUE)
pairs(pca_scores, lower.panel = function(x, y) {
points(x, y)
text(x, y, labels = kiln_numbers, cex = 0.7, pos = 1)
scatterplot(x, y, smooth = FALSE, reg.line = FALSE, grid = FALSE, add = TRUE)
}, diag.panel = function(x) {
boxplot(x, horizontal = TRUE, outline = FALSE, add = TRUE)
})
pca_scores <- pca_result$x[, 1:5]
pairs(pca_scores, lower.panel = function(x, y) {
points(x, y)
text(x, y, labels = kiln_numbers, cex = 0.7, pos = 1)
scatterplot(x, y, smooth = FALSE, reg.line = FALSE, grid = FALSE, add = TRUE)
}, diag.panel = function(x) {
boxplot(x, horizontal = TRUE, outline = FALSE, add = TRUE)
})
pairs(pca_scores, lower.panel = function(x, y) {
points(x, y)
text(x, y, labels = kiln, cex = 0.7, pos = 1)
scatterplot(x, y, smooth = FALSE, reg.line = FALSE, grid = FALSE, add = TRUE)
}, diag.panel = function(x) {
boxplot(x, horizontal = TRUE, outline = FALSE, add = TRUE)
})
attach(pottery)
pca_result <- prcomp(pottery, scale = TRUE)
pca_scores <- pca_result$x[, 1:5]
pairs(pca_scores, lower.panel = function(x, y) {
points(x, y)
text(x, y, labels = kiln_numbers, cex = 0.7, pos = 1)
scatterplot(x, y, smooth = FALSE, reg.line = FALSE, grid = FALSE, add = TRUE)
}, diag.panel = function(x) {
boxplot(x, horizontal = TRUE, outline = FALSE, add = TRUE)
})
pottery
pairs(pca_scores, lower.panel = function(x, y) {
points(x, y)
text(x, y, labels = kiln, cex = 0.7, pos = 1)
scatterplot(x, y, smooth = FALSE, reg.line = FALSE, grid = FALSE, add = TRUE)
}, diag.panel = function(x) {
boxplot(x, horizontal = TRUE, outline = FALSE, add = TRUE)
})
library(ggplot2)
library(GGally)
pca_scores_with_kiln <- cbind(pca_scores, Kiln = kiln)
# Create the scatterplot matrix
plot <- ggpairs(pca_scores_with_kiln, columns = 1:5,
upper = list(continuous = "density"),
diag = list(continuous = "barDiag"),
lower = list(continuous = "points", combo = "box"),
mapping = ggplot2::aes(color = Kiln, label = Kiln))
pca_scores_with_kiln
# Create the scatterplot matrix
plot <- ggpairs(pca_scores_with_kiln, columns = 1:5,
upper = list(continuous = "density"),
diag = list(continuous = "barDiag"),
lower = list(continuous = "points", combo = "box"),
mapping = ggplot2::aes(color = Kiln, label = Kiln))
pca_scores <- as.data.frame(pca_result$x[, 1:5])
pca_scores_with_kiln <- cbind(pca_scores, Kiln = kiln)
# Create the scatterplot matrix
plot <- ggpairs(pca_scores_with_kiln, columns = 1:5,
upper = list(continuous = "density"),
diag = list(continuous = "barDiag"),
lower = list(continuous = "points", combo = "box"),
mapping = ggplot2::aes(color = Kiln, label = Kiln))
# Remove the legend
plot <- plot + theme(legend.position = "none")
# Print the scatterplot matrix
print(plot)
data("USairpollution", package = "HSAUR2")
library(mclust)
USairpollution
USairpollution <- USairpollution[,-1]
USairpollution
mclust_result <- Mclust(USairpollution)
summary(mclust_result)
detach(pottery)
attach(USairpollution)
boxplot(SO2 ~ Cluster, main = "SO2 Concentration by Cluster", xlab = "Cluster", ylab = "SO2 Concentration")
data("USairpollution", package = "HSAUR2")
library(mclust)
attach(USairpollution)
mclust_result <- Mclust(USairpollution[,-1])
summary(mclust_result)
summary(mclust_result)
USairpollution$Cluster <- mclust_result$classification
boxplot(SO2 ~ Cluster, main = "SO2 Concentration by Cluster", xlab = "Cluster", ylab = "SO2 Concentration")
USairpollution$Cluster <- mclust_result$classification
boxplot(SO2 ~ Cluster, data = USairpollution, main = "SO2 Concentration by Cluster", xlab = "Cluster", ylab = "SO2 Concentration")
anova_result <- aov(SO2 ~ Cluster, data = USairpollution)
summary(anova_result)
boxplot(SO2 ~ Cluster, data = USairpollution, main = "SO2 Concentration by Cluster", xlab = "Cluster", ylab = "SO2 Concentration")
